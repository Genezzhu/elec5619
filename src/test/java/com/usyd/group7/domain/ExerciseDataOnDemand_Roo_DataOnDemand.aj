// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.usyd.group7.domain;

import com.usyd.group7.domain.ClientDataOnDemand;
import com.usyd.group7.domain.Exercise;
import com.usyd.group7.domain.ExerciseDataOnDemand;
import com.usyd.group7.domain.ExerciseTypeDataOnDemand;
import com.usyd.group7.service.ExerciseService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ExerciseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ExerciseDataOnDemand: @Component;
    
    private Random ExerciseDataOnDemand.rnd = new SecureRandom();
    
    private List<Exercise> ExerciseDataOnDemand.data;
    
    @Autowired
    ClientDataOnDemand ExerciseDataOnDemand.clientDataOnDemand;
    
    @Autowired
    ExerciseTypeDataOnDemand ExerciseDataOnDemand.exerciseTypeDataOnDemand;
    
    @Autowired
    ExerciseService ExerciseDataOnDemand.exerciseService;
    
    public Exercise ExerciseDataOnDemand.getNewTransientExercise(int index) {
        Exercise obj = new Exercise();
        setCalorie(obj, index);
        setCreated(obj, index);
        setDescr(obj, index);
        setDuration(obj, index);
        setLocation(obj, index);
        return obj;
    }
    
    public void ExerciseDataOnDemand.setCalorie(Exercise obj, int index) {
        double calorie = new Integer(index).doubleValue();
        obj.setCalorie(calorie);
    }
    
    public void ExerciseDataOnDemand.setCreated(Exercise obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void ExerciseDataOnDemand.setDescr(Exercise obj, int index) {
        String descr = "descr_" + index;
        obj.setDescr(descr);
    }
    
    public void ExerciseDataOnDemand.setDuration(Exercise obj, int index) {
        double duration = new Integer(index).doubleValue();
        obj.setDuration(duration);
    }
    
    public void ExerciseDataOnDemand.setLocation(Exercise obj, int index) {
        String location = "location_" + index;
        obj.setLocation(location);
    }
    
    public Exercise ExerciseDataOnDemand.getSpecificExercise(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Exercise obj = data.get(index);
        Long id = obj.getId();
        return exerciseService.findExercise(id);
    }
    
    public Exercise ExerciseDataOnDemand.getRandomExercise() {
        init();
        Exercise obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return exerciseService.findExercise(id);
    }
    
    public boolean ExerciseDataOnDemand.modifyExercise(Exercise obj) {
        return false;
    }
    
    public void ExerciseDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = exerciseService.findExerciseEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Exercise' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Exercise>();
        for (int i = 0; i < 10; i++) {
            Exercise obj = getNewTransientExercise(i);
            try {
                exerciseService.saveExercise(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
